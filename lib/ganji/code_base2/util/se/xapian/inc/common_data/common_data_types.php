<?php
/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
include_once $GLOBALS['THRIFT_ROOT'].'/Thrift.php';


class Hit {
  static $_TSPEC;

  public $id = null;
  public $city_id = null;
  public $weight = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'city_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'weight',
          'type' => TType::DOUBLE,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['city_id'])) {
        $this->city_id = $vals['city_id'];
      }
      if (isset($vals['weight'])) {
        $this->weight = $vals['weight'];
      }
    }
  }

  public function getName() {
    return 'Hit';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->city_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->weight);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Hit');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I32, 1);
      $xfer += $output->writeI32($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->city_id !== null) {
      $xfer += $output->writeFieldBegin('city_id', TType::I32, 2);
      $xfer += $output->writeI32($this->city_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->weight !== null) {
      $xfer += $output->writeFieldBegin('weight', TType::DOUBLE, 3);
      $xfer += $output->writeDouble($this->weight);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BSToASSearchResult {
  static $_TSPEC;

  public $search_id = null;
  public $bs_id = null;
  public $total_num = null;
  public $hit_list = null;
  public $count_list = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'search_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'bs_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'total_num',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'hit_list',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'Hit',
            ),
          ),
        5 => array(
          'var' => 'count_list',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::I32,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::I32,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['search_id'])) {
        $this->search_id = $vals['search_id'];
      }
      if (isset($vals['bs_id'])) {
        $this->bs_id = $vals['bs_id'];
      }
      if (isset($vals['total_num'])) {
        $this->total_num = $vals['total_num'];
      }
      if (isset($vals['hit_list'])) {
        $this->hit_list = $vals['hit_list'];
      }
      if (isset($vals['count_list'])) {
        $this->count_list = $vals['count_list'];
      }
    }
  }

  public function getName() {
    return 'BSToASSearchResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->search_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->bs_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->total_num);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::LST) {
            $this->hit_list = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $elem5 = new Hit();
              $xfer += $elem5->read($input);
              $this->hit_list []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::MAP) {
            $this->count_list = array();
            $_size6 = 0;
            $_ktype7 = 0;
            $_vtype8 = 0;
            $xfer += $input->readMapBegin($_ktype7, $_vtype8, $_size6);
            for ($_i10 = 0; $_i10 < $_size6; ++$_i10)
            {
              $key11 = '';
              $val12 = 0;
              $xfer += $input->readString($key11);
              $xfer += $input->readI32($val12);
              $this->count_list[$key11] = $val12;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BSToASSearchResult');
    if ($this->search_id !== null) {
      $xfer += $output->writeFieldBegin('search_id', TType::I32, 1);
      $xfer += $output->writeI32($this->search_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->bs_id !== null) {
      $xfer += $output->writeFieldBegin('bs_id', TType::I32, 2);
      $xfer += $output->writeI32($this->bs_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->total_num !== null) {
      $xfer += $output->writeFieldBegin('total_num', TType::I32, 3);
      $xfer += $output->writeI32($this->total_num);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->hit_list !== null) {
      if (!is_array($this->hit_list)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('hit_list', TType::LST, 4);
      {
        $output->writeListBegin(TType::STRUCT, count($this->hit_list));
        {
          foreach ($this->hit_list as $iter13)
          {
            $xfer += $iter13->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->count_list !== null) {
      if (!is_array($this->count_list)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('count_list', TType::MAP, 5);
      {
        $output->writeMapBegin(TType::STRING, TType::I32, count($this->count_list));
        {
          foreach ($this->count_list as $kiter14 => $viter15)
          {
            $xfer += $output->writeString($kiter14);
            $xfer += $output->writeI32($viter15);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ASToQASearchResult {
  static $_TSPEC;

  public $search_id = null;
  public $as_id = null;
  public $total_num = null;
  public $results = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'search_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'as_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'total_num',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'results',
          'type' => TType::LST,
          'etype' => TType::MAP,
          'elem' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::STRING,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::STRING,
              ),
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['search_id'])) {
        $this->search_id = $vals['search_id'];
      }
      if (isset($vals['as_id'])) {
        $this->as_id = $vals['as_id'];
      }
      if (isset($vals['total_num'])) {
        $this->total_num = $vals['total_num'];
      }
      if (isset($vals['results'])) {
        $this->results = $vals['results'];
      }
    }
  }

  public function getName() {
    return 'ASToQASearchResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->search_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->as_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->total_num);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::LST) {
            $this->results = array();
            $_size16 = 0;
            $_etype19 = 0;
            $xfer += $input->readListBegin($_etype19, $_size16);
            for ($_i20 = 0; $_i20 < $_size16; ++$_i20)
            {
              $elem21 = null;
              $elem21 = array();
              $_size22 = 0;
              $_ktype23 = 0;
              $_vtype24 = 0;
              $xfer += $input->readMapBegin($_ktype23, $_vtype24, $_size22);
              for ($_i26 = 0; $_i26 < $_size22; ++$_i26)
              {
                $key27 = '';
                $val28 = '';
                $xfer += $input->readString($key27);
                $xfer += $input->readString($val28);
                $elem21[$key27] = $val28;
              }
              $xfer += $input->readMapEnd();
              $this->results []= $elem21;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ASToQASearchResult');
    if ($this->search_id !== null) {
      $xfer += $output->writeFieldBegin('search_id', TType::I32, 1);
      $xfer += $output->writeI32($this->search_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->as_id !== null) {
      $xfer += $output->writeFieldBegin('as_id', TType::I32, 2);
      $xfer += $output->writeI32($this->as_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->total_num !== null) {
      $xfer += $output->writeFieldBegin('total_num', TType::I32, 3);
      $xfer += $output->writeI32($this->total_num);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->results !== null) {
      if (!is_array($this->results)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('results', TType::LST, 4);
      {
        $output->writeListBegin(TType::MAP, count($this->results));
        {
          foreach ($this->results as $iter29)
          {
            {
              $output->writeMapBegin(TType::STRING, TType::STRING, count($iter29));
              {
                foreach ($iter29 as $kiter30 => $viter31)
                {
                  $xfer += $output->writeString($kiter30);
                  $xfer += $output->writeString($viter31);
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SearchReturnValue {
  static $_TSPEC;

  public $flag = null;
  public $total_num = null;
  public $return_value = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'flag',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'total_num',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'return_value',
          'type' => TType::LST,
          'etype' => TType::MAP,
          'elem' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::STRING,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::STRING,
              ),
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['flag'])) {
        $this->flag = $vals['flag'];
      }
      if (isset($vals['total_num'])) {
        $this->total_num = $vals['total_num'];
      }
      if (isset($vals['return_value'])) {
        $this->return_value = $vals['return_value'];
      }
    }
  }

  public function getName() {
    return 'SearchReturnValue';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->flag);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->total_num);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->return_value = array();
            $_size32 = 0;
            $_etype35 = 0;
            $xfer += $input->readListBegin($_etype35, $_size32);
            for ($_i36 = 0; $_i36 < $_size32; ++$_i36)
            {
              $elem37 = null;
              $elem37 = array();
              $_size38 = 0;
              $_ktype39 = 0;
              $_vtype40 = 0;
              $xfer += $input->readMapBegin($_ktype39, $_vtype40, $_size38);
              for ($_i42 = 0; $_i42 < $_size38; ++$_i42)
              {
                $key43 = '';
                $val44 = '';
                $xfer += $input->readString($key43);
                $xfer += $input->readString($val44);
                $elem37[$key43] = $val44;
              }
              $xfer += $input->readMapEnd();
              $this->return_value []= $elem37;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SearchReturnValue');
    if ($this->flag !== null) {
      $xfer += $output->writeFieldBegin('flag', TType::I32, 1);
      $xfer += $output->writeI32($this->flag);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->total_num !== null) {
      $xfer += $output->writeFieldBegin('total_num', TType::I32, 2);
      $xfer += $output->writeI32($this->total_num);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->return_value !== null) {
      if (!is_array($this->return_value)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('return_value', TType::LST, 3);
      {
        $output->writeListBegin(TType::MAP, count($this->return_value));
        {
          foreach ($this->return_value as $iter45)
          {
            {
              $output->writeMapBegin(TType::STRING, TType::STRING, count($iter45));
              {
                foreach ($iter45 as $kiter46 => $viter47)
                {
                  $xfer += $output->writeString($kiter46);
                  $xfer += $output->writeString($viter47);
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class DebugSearchReturnValue {
  static $_TSPEC;

  public $flag = null;
  public $debug_info = null;
  public $return_value = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'flag',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'debug_info',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        3 => array(
          'var' => 'return_value',
          'type' => TType::LST,
          'etype' => TType::MAP,
          'elem' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::STRING,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::STRING,
              ),
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['flag'])) {
        $this->flag = $vals['flag'];
      }
      if (isset($vals['debug_info'])) {
        $this->debug_info = $vals['debug_info'];
      }
      if (isset($vals['return_value'])) {
        $this->return_value = $vals['return_value'];
      }
    }
  }

  public function getName() {
    return 'DebugSearchReturnValue';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->flag);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::MAP) {
            $this->debug_info = array();
            $_size48 = 0;
            $_ktype49 = 0;
            $_vtype50 = 0;
            $xfer += $input->readMapBegin($_ktype49, $_vtype50, $_size48);
            for ($_i52 = 0; $_i52 < $_size48; ++$_i52)
            {
              $key53 = '';
              $val54 = '';
              $xfer += $input->readString($key53);
              $xfer += $input->readString($val54);
              $this->debug_info[$key53] = $val54;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->return_value = array();
            $_size55 = 0;
            $_etype58 = 0;
            $xfer += $input->readListBegin($_etype58, $_size55);
            for ($_i59 = 0; $_i59 < $_size55; ++$_i59)
            {
              $elem60 = null;
              $elem60 = array();
              $_size61 = 0;
              $_ktype62 = 0;
              $_vtype63 = 0;
              $xfer += $input->readMapBegin($_ktype62, $_vtype63, $_size61);
              for ($_i65 = 0; $_i65 < $_size61; ++$_i65)
              {
                $key66 = '';
                $val67 = '';
                $xfer += $input->readString($key66);
                $xfer += $input->readString($val67);
                $elem60[$key66] = $val67;
              }
              $xfer += $input->readMapEnd();
              $this->return_value []= $elem60;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('DebugSearchReturnValue');
    if ($this->flag !== null) {
      $xfer += $output->writeFieldBegin('flag', TType::I32, 1);
      $xfer += $output->writeI32($this->flag);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->debug_info !== null) {
      if (!is_array($this->debug_info)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('debug_info', TType::MAP, 2);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->debug_info));
        {
          foreach ($this->debug_info as $kiter68 => $viter69)
          {
            $xfer += $output->writeString($kiter68);
            $xfer += $output->writeString($viter69);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->return_value !== null) {
      if (!is_array($this->return_value)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('return_value', TType::LST, 3);
      {
        $output->writeListBegin(TType::MAP, count($this->return_value));
        {
          foreach ($this->return_value as $iter70)
          {
            {
              $output->writeMapBegin(TType::STRING, TType::STRING, count($iter70));
              {
                foreach ($iter70 as $kiter71 => $viter72)
                {
                  $xfer += $output->writeString($kiter71);
                  $xfer += $output->writeString($viter72);
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SearchResult {
  static $_TSPEC;

  public $search_id = null;
  public $estimate_time = null;
  public $flag = null;
  public $total_num = null;
  public $return_value = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'search_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'estimate_time',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'flag',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'total_num',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'return_value',
          'type' => TType::LST,
          'etype' => TType::MAP,
          'elem' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::STRING,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::STRING,
              ),
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['search_id'])) {
        $this->search_id = $vals['search_id'];
      }
      if (isset($vals['estimate_time'])) {
        $this->estimate_time = $vals['estimate_time'];
      }
      if (isset($vals['flag'])) {
        $this->flag = $vals['flag'];
      }
      if (isset($vals['total_num'])) {
        $this->total_num = $vals['total_num'];
      }
      if (isset($vals['return_value'])) {
        $this->return_value = $vals['return_value'];
      }
    }
  }

  public function getName() {
    return 'SearchResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->search_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->estimate_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->flag);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->total_num);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::LST) {
            $this->return_value = array();
            $_size73 = 0;
            $_etype76 = 0;
            $xfer += $input->readListBegin($_etype76, $_size73);
            for ($_i77 = 0; $_i77 < $_size73; ++$_i77)
            {
              $elem78 = null;
              $elem78 = array();
              $_size79 = 0;
              $_ktype80 = 0;
              $_vtype81 = 0;
              $xfer += $input->readMapBegin($_ktype80, $_vtype81, $_size79);
              for ($_i83 = 0; $_i83 < $_size79; ++$_i83)
              {
                $key84 = '';
                $val85 = '';
                $xfer += $input->readString($key84);
                $xfer += $input->readString($val85);
                $elem78[$key84] = $val85;
              }
              $xfer += $input->readMapEnd();
              $this->return_value []= $elem78;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SearchResult');
    if ($this->search_id !== null) {
      $xfer += $output->writeFieldBegin('search_id', TType::I32, 1);
      $xfer += $output->writeI32($this->search_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->estimate_time !== null) {
      $xfer += $output->writeFieldBegin('estimate_time', TType::I32, 2);
      $xfer += $output->writeI32($this->estimate_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->flag !== null) {
      $xfer += $output->writeFieldBegin('flag', TType::I32, 3);
      $xfer += $output->writeI32($this->flag);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->total_num !== null) {
      $xfer += $output->writeFieldBegin('total_num', TType::I32, 4);
      $xfer += $output->writeI32($this->total_num);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->return_value !== null) {
      if (!is_array($this->return_value)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('return_value', TType::LST, 5);
      {
        $output->writeListBegin(TType::MAP, count($this->return_value));
        {
          foreach ($this->return_value as $iter86)
          {
            {
              $output->writeMapBegin(TType::STRING, TType::STRING, count($iter86));
              {
                foreach ($iter86 as $kiter87 => $viter88)
                {
                  $xfer += $output->writeString($kiter87);
                  $xfer += $output->writeString($viter88);
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ASToBSSearchPara {
  static $_TSPEC;

  public $search_id = null;
  public $as_id = null;
  public $type = null;
  public $query_str = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'search_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'as_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'type',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'query_str',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['search_id'])) {
        $this->search_id = $vals['search_id'];
      }
      if (isset($vals['as_id'])) {
        $this->as_id = $vals['as_id'];
      }
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['query_str'])) {
        $this->query_str = $vals['query_str'];
      }
    }
  }

  public function getName() {
    return 'ASToBSSearchPara';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->search_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->as_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->query_str);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ASToBSSearchPara');
    if ($this->search_id !== null) {
      $xfer += $output->writeFieldBegin('search_id', TType::I32, 1);
      $xfer += $output->writeI32($this->search_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->as_id !== null) {
      $xfer += $output->writeFieldBegin('as_id', TType::I32, 2);
      $xfer += $output->writeI32($this->as_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::I32, 3);
      $xfer += $output->writeI32($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->query_str !== null) {
      $xfer += $output->writeFieldBegin('query_str', TType::STRING, 4);
      $xfer += $output->writeString($this->query_str);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class QAToASSearchPara {
  static $_TSPEC;

  public $search_id = null;
  public $qa_id = null;
  public $type = null;
  public $query_str = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'search_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'qa_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'type',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'query_str',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['search_id'])) {
        $this->search_id = $vals['search_id'];
      }
      if (isset($vals['qa_id'])) {
        $this->qa_id = $vals['qa_id'];
      }
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['query_str'])) {
        $this->query_str = $vals['query_str'];
      }
    }
  }

  public function getName() {
    return 'QAToASSearchPara';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->search_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->qa_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->query_str);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('QAToASSearchPara');
    if ($this->search_id !== null) {
      $xfer += $output->writeFieldBegin('search_id', TType::I32, 1);
      $xfer += $output->writeI32($this->search_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->qa_id !== null) {
      $xfer += $output->writeFieldBegin('qa_id', TType::I32, 2);
      $xfer += $output->writeI32($this->qa_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::I32, 3);
      $xfer += $output->writeI32($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->query_str !== null) {
      $xfer += $output->writeFieldBegin('query_str', TType::STRING, 4);
      $xfer += $output->writeString($this->query_str);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class DebugIndexInfo {
  static $_TSPEC;

  public $index_status = null;
  public $index_term = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'index_status',
          'type' => TType::BOOL,
          ),
        2 => array(
          'var' => 'index_term',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['index_status'])) {
        $this->index_status = $vals['index_status'];
      }
      if (isset($vals['index_term'])) {
        $this->index_term = $vals['index_term'];
      }
    }
  }

  public function getName() {
    return 'DebugIndexInfo';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->index_status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->index_term = array();
            $_size89 = 0;
            $_etype92 = 0;
            $xfer += $input->readListBegin($_etype92, $_size89);
            for ($_i93 = 0; $_i93 < $_size89; ++$_i93)
            {
              $elem94 = null;
              $xfer += $input->readString($elem94);
              $this->index_term []= $elem94;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('DebugIndexInfo');
    if ($this->index_status !== null) {
      $xfer += $output->writeFieldBegin('index_status', TType::BOOL, 1);
      $xfer += $output->writeBool($this->index_status);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->index_term !== null) {
      if (!is_array($this->index_term)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('index_term', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRING, count($this->index_term));
        {
          foreach ($this->index_term as $iter95)
          {
            $xfer += $output->writeString($iter95);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class DebugSearchTerm {
  static $_TSPEC;

  public $search_term = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'search_term',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['search_term'])) {
        $this->search_term = $vals['search_term'];
      }
    }
  }

  public function getName() {
    return 'DebugSearchTerm';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->search_term = array();
            $_size96 = 0;
            $_etype99 = 0;
            $xfer += $input->readListBegin($_etype99, $_size96);
            for ($_i100 = 0; $_i100 < $_size96; ++$_i100)
            {
              $elem101 = null;
              $xfer += $input->readString($elem101);
              $this->search_term []= $elem101;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('DebugSearchTerm');
    if ($this->search_term !== null) {
      if (!is_array($this->search_term)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('search_term', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->search_term));
        {
          foreach ($this->search_term as $iter102)
          {
            $xfer += $output->writeString($iter102);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

?>
